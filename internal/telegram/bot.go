package telegram

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"lime-bot/internal/config"
	"lime-bot/internal/db"
)

type Service struct {
	bot  *tgbotapi.BotAPI
	repo *db.Repository
	cfg  *config.Config
}

func New(cfg *config.Config, repo *db.Repository) (*Service, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, err
	}
	bot.Debug = false

	// –£–¥–∞–ª—è–µ–º webhook —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å long-polling
	_, err = bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		slog.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook", "error", err)
	} else {
		slog.Info("Webhook —É–¥–∞–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ long-polling")
	}

	slog.Info("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç", "username", bot.Self.UserName)

	service := &Service{bot: bot, repo: repo, cfg: cfg}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
	err = service.setCommands()
	if err != nil {
		slog.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥", "error", err)
	}

	return service, nil
}

func (s *Service) Start(ctx context.Context) error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := s.bot.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case upd := <-updates:
			s.handleUpdate(upd)
		}
	}
}

func (s *Service) handleUpdate(upd tgbotapi.Update) {
	if upd.Message != nil {
		user := &db.User{
			TgID:     upd.Message.From.ID,
			Username: upd.Message.From.UserName,
		}
		s.repo.DB().FirstOrCreate(user, "tg_id = ?", upd.Message.From.ID)

		if upd.Message.IsCommand() {
			s.handleCommand(upd.Message)
		} else {
			s.handleFeedbackMessage(upd.Message)
		}
		return
	}

	if upd.CallbackQuery != nil {
		s.handleCallbackQuery(upd.CallbackQuery)
		return
	}
}

func (s *Service) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	data := callback.Data

	if strings.HasPrefix(data, CallbackBuyPlan.String()) ||
		strings.HasPrefix(data, CallbackBuyPlatform.String()) ||
		strings.HasPrefix(data, CallbackBuyQty.String()) ||
		strings.HasPrefix(data, CallbackBuyMethod.String()) {
		s.handleBuyCallback(callback)
		return
	}

	if strings.HasPrefix(data, CallbackSubPlatform.String()) {
		s.handleSubscriptionCallback(callback)
		return
	}

	if data == CallbackAdminList.String() ||
		data == CallbackAdminAdd.String() ||
		data == CallbackAdminDisable.String() ||
		data == CallbackAdminCashier.String() ||
		strings.HasPrefix(data, CallbackPaymentApprove.String()) ||
		strings.HasPrefix(data, CallbackPaymentReject.String()) ||
		strings.HasPrefix(data, CallbackInfoUser.String()) ||
		strings.HasPrefix(data, CallbackDisableAdmin.String()) ||
		strings.HasPrefix(data, CallbackSetCashier.String()) {
		s.handleAdminCallback(callback)
		return
	}

	if strings.HasPrefix(data, CallbackArchivePlan.String()) {
		planIDStr := strings.TrimPrefix(data, CallbackArchivePlan.String())
		planID, err := strconv.ParseUint(planIDStr, 10, 32)
		if err != nil {
			s.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞—Ä–∏—Ñ–∞")
			return
		}

		result := s.repo.DB().Model(&db.Plan{}).Where("id = ?", planID).Update("archived", true)
		if result.Error != nil {
			s.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
			return
		}

		s.answerCallback(callback.ID, "–¢–∞—Ä–∏—Ñ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")

		editMsg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚úÖ –¢–∞—Ä–∏—Ñ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω",
		)
		s.bot.Send(editMsg)
		return
	}

	if strings.HasPrefix(data, CallbackArchiveMethod.String()) {
		methodIDStr := strings.TrimPrefix(data, CallbackArchiveMethod.String())
		methodID, err := strconv.ParseUint(methodIDStr, 10, 32)
		if err != nil {
			s.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ç–æ–¥–∞")
			return
		}

		result := s.repo.DB().Model(&db.PaymentMethod{}).Where("id = ?", methodID).Update("archived", true)
		if result.Error != nil {
			s.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
			return
		}

		s.answerCallback(callback.ID, "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")

		editMsg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω",
		)
		s.bot.Send(editMsg)
		return
	}
}

func (s *Service) handleCommand(msg *tgbotapi.Message) {
	cmd := Command(msg.Command())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
	if !cmd.IsValid() {
		s.handleUnknown(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
	if cmd.IsAdminOnly() && !s.isAdmin(msg.From.ID) {
		s.reply(msg.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	switch cmd {
	case CmdStart:
		s.handleStartWithRef(msg)
	case CmdHelp:
		s.handleHelp(msg)
	case CmdPlans:
		s.handlePlans(msg)
	case CmdAddPlan:
		s.handleAddPlan(msg)
	case CmdArchivePlan:
		s.handleArchivePlan(msg)
	case CmdAddPMethod:
		s.handleAddPaymentMethod(msg)
	case CmdListPMethods:
		s.handleListPaymentMethods(msg)
	case CmdArchivePMethod:
		s.handleArchivePaymentMethod(msg)
	case CmdBuy:
		s.handleBuy(msg)
	case CmdMyKeys:
		s.handleMyKeys(msg)
	case CmdDisable:
		s.handleDisable(msg)
	case CmdEnable:
		s.handleEnable(msg)
	case CmdAdmins:
		s.handleAdmins(msg)
	case CmdPayQueue:
		s.handlePayQueue(msg)
	case CmdInfo:
		s.handleInfo(msg)
	case CmdAddAdmin:
		s.handleAddAdmin(msg)
	case CmdRef:
		s.handleRef(msg)
	case CmdFeedback:
		s.handleFeedback(msg)
	case CmdSupport:
		s.handleSupport(msg)
	}
}

func (s *Service) handleStart(msg *tgbotapi.Message) {
	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	user := &db.User{
		TgID:     msg.From.ID,
		Username: msg.From.UserName,
	}
	s.repo.DB().FirstOrCreate(user, "tg_id = ?", msg.From.ID)

	// –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
	if user.Username != msg.From.UserName {
		user.Username = msg.From.UserName
		s.repo.DB().Save(user)
	}

	text := `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lime VPN! üçã

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/plans - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã
/help - —Å–ø—Ä–∞–≤–∫–∞`
	s.reply(msg.Chat.ID, text)
}

func (s *Service) handleHelp(msg *tgbotapi.Message) {
	text := `üçã Lime VPN - –ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π VPN

üë§ –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
/plans - —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
/buy - –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
/mykeys - –º–æ–∏ –∫–ª—é—á–∏
/ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
/feedback - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
/support - —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
/help - —Å–ø—Ä–∞–≤–∫–∞`

	if s.isAdmin(msg.From.ID) {
		text += `

‚ö° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/addplan - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ
/archiveplan - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ
/addpmethod - –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
/listpmethods - —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
/archivepmethod - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
/disable <username> - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/enable <username> - –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/payqueue - –æ—á–µ—Ä–µ–¥—å –ø–ª–∞—Ç–µ–∂–µ–π
/info <username> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ`

		if s.isSuperAdmin(msg.From.ID) {
			text += `

üëë –ö–æ–º–∞–Ω–¥—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞:
/admins - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
/add_admin @username role - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞`
		}
	}

	s.reply(msg.Chat.ID, text)
}

func (s *Service) handlePlans(msg *tgbotapi.Message) {
	var plans []db.Plan
	result := s.repo.DB().Where("archived = false").Find(&plans)
	if result.Error != nil {
		s.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤")
		return
	}

	if len(plans) == 0 {
		s.reply(msg.Chat.ID, "–¢–∞—Ä–∏—Ñ—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
		return
	}

	text := "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
	for _, plan := range plans {
		text += fmt.Sprintf("üîπ %s\nüí∞ %d —Ä—É–±.\n‚è± %d –¥–Ω–µ–π\n\n",
			plan.Name, plan.PriceInt, plan.DurationDays)
	}
	s.reply(msg.Chat.ID, text)
}

func (s *Service) handleAddPlan(msg *tgbotapi.Message) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) < 3 {
		s.reply(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addplan <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞> <–¥–Ω–∏>\n–ü—Ä–∏–º–µ—Ä: /addplan –ú–µ—Å—è—Ü 200 30")
		return
	}

	name := args[0]
	price, err := strconv.Atoi(args[1])
	if err != nil {
		s.reply(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
		return
	}

	days, err := strconv.Atoi(args[2])
	if err != nil {
		s.reply(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
		return
	}

	plan := &db.Plan{
		Name:         name,
		PriceInt:     price,
		DurationDays: days,
	}

	result := s.repo.DB().Create(plan)
	if result.Error != nil {
		s.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞")
		return
	}

	s.reply(msg.Chat.ID, fmt.Sprintf("‚úÖ –¢–∞—Ä–∏—Ñ \"%s\" —Å–æ–∑–¥–∞–Ω", name))
}

func (s *Service) handleArchivePlan(msg *tgbotapi.Message) {
	var plans []db.Plan
	result := s.repo.DB().Where("archived = false").Find(&plans)
	if result.Error != nil {
		s.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤")
		return
	}

	if len(plans) == 0 {
		s.reply(msg.Chat.ID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
		return
	}

	var keyboard [][]tgbotapi.InlineKeyboardButton
	for _, plan := range plans {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s (%d —Ä—É–±.)", plan.Name, plan.PriceInt),
			fmt.Sprintf("archive_plan_%d", plan.ID),
		)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{btn})
	}

	msgConfig := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:")
	msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	s.bot.Send(msgConfig)
}

func (s *Service) handleSupport(msg *tgbotapi.Message) {
	var admins []db.Admin
	result := s.repo.DB().Where("role = ? AND disabled = false", RoleSupport.String()).Find(&admins)
	if result.Error != nil || len(admins) == 0 {
		s.reply(msg.Chat.ID, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	text := "üéß –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Lime VPN\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ–º—É –∏–∑ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:\n\n"
	for _, admin := range admins {
		var user db.User
		if err := s.repo.DB().First(&user, "tg_id = ?", admin.TgID).Error; err == nil {
			text += fmt.Sprintf("‚Ä¢ @%s\n", user.Username)
		}
	}

	text += "\n–û–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN!"
	s.reply(msg.Chat.ID, text)
}

func (s *Service) handleUnknown(msg *tgbotapi.Message) {
	s.reply(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
}

func (s *Service) reply(chatID int64, text string) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if !s.isAdmin(chatID) {
		if supportInfo := s.getSupportUsers(); supportInfo != "" {
			text += supportInfo
		}
	}

	msg := tgbotapi.NewMessage(chatID, text)
	_, err := s.bot.Send(msg)
	return err
}

func (s *Service) isAdmin(userID int64) bool {
	if superAdminID, err := strconv.ParseInt(s.cfg.SuperAdminID, 10, 64); err == nil && superAdminID == userID {
		return true
	}

	var admin db.Admin
	result := s.repo.DB().Where("tg_id = ? AND disabled = false", userID).First(&admin)
	return result.Error == nil
}

func (s *Service) isSuperAdmin(userID int64) bool {
	if superAdminID, err := strconv.ParseInt(s.cfg.SuperAdminID, 10, 64); err == nil && superAdminID == userID {
		return true
	}

	var admin db.Admin
	result := s.repo.DB().Where("tg_id = ? AND disabled = false", userID).First(&admin)
	if result.Error != nil {
		return false
	}

	return AdminRole(admin.Role).CanManageAdmins()
}

func (s *Service) getSupportUsers() string {
	var admins []db.Admin
	result := s.repo.DB().Where("role = ? AND disabled = false", RoleSupport.String()).Find(&admins)
	if result.Error != nil || len(admins) == 0 {
		return ""
	}

	var supportUsers []string
	for _, admin := range admins {
		var user db.User
		if err := s.repo.DB().First(&user, "tg_id = ?", admin.TgID).Error; err == nil {
			supportUsers = append(supportUsers, "@"+user.Username)
		}
	}

	if len(supportUsers) == 0 {
		return ""
	}

	return fmt.Sprintf("\n\nüí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: %s", strings.Join(supportUsers, ", "))
}

func (s *Service) answerCallback(callbackID, text string) {
	callback := tgbotapi.NewCallback(callbackID, text)
	s.bot.Request(callback)
}

func (s *Service) Bot() *tgbotapi.BotAPI {
	return s.bot
}

func (s *Service) setCommands() error {
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"},
		{Command: "help", Description: "‚ùì –°–ø—Ä–∞–≤–∫–∞"},
		{Command: "plans", Description: "üìã –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤"},
		{Command: "buy", Description: "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"},
		{Command: "mykeys", Description: "üîë –ú–æ–∏ –∫–ª—é—á–∏"},
		{Command: "ref", Description: "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"},
		{Command: "feedback", Description: "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"},
		{Command: "support", Description: "üéß –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"},
	}

	config := tgbotapi.NewSetMyCommands(commands...)
	_, err := s.bot.Request(config)
	return err
}
