package telegram

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"lime-bot/internal/db"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (s *Service) handleAdmins(msg *tgbotapi.Message) {
	if !s.isAdmin(msg.From.ID) {
		s.reply(msg.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "admin_add")},
		{tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", "admin_list")},
		{tgbotapi.NewInlineKeyboardButtonData("üóë –û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", "admin_disable")},
		{tgbotapi.NewInlineKeyboardButtonData("‚≠ê –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞—Å—Å–∏—Ä–∞", "admin_cashier")},
	}

	msgConfig := tgbotapi.NewMessage(msg.Chat.ID, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:")
	msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	s.bot.Send(msgConfig)
}

func (s *Service) handlePayQueue(msg *tgbotapi.Message) {
	if !s.isAdmin(msg.From.ID) {
		s.reply(msg.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ pending
	var payments []db.Payment
	result := s.repo.DB().Where("status = 'pending'").
		Preload("User").
		Preload("Plan").
		Preload("Method").
		Order("created_at ASC").
		Find(&payments)

	if result.Error != nil {
		s.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–ª–∞—Ç–µ–∂–µ–π")
		return
	}

	if len(payments) == 0 {
		s.reply(msg.Chat.ID, "–û—á–µ—Ä–µ–¥—å –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞")
		return
	}

	text := "üí≥ –û—á–µ—Ä–µ–¥—å –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for i, payment := range payments {
		text += fmt.Sprintf("üÜî #%d\nüë§ @%s\nüí∞ %d —Ä—É–±.\nüì¶ %s x%d\nüí≥ %s (%s)\nüìÖ %s\n\n",
			payment.ID,
			payment.User.Username,
			payment.Amount,
			payment.Plan.Name,
			payment.Qty,
			payment.Method.Bank,
			payment.Method.PhoneNumber,
			payment.CreatedAt.Format("02.01.2006 15:04"),
		)

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
		buttonRow := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚úÖ #%d", payment.ID),
				fmt.Sprintf("payment_approve_%d", payment.ID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚ùå #%d", payment.ID),
				fmt.Sprintf("payment_reject_%d", payment.ID),
			),
		}
		keyboard = append(keyboard, buttonRow)

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
		if i >= 4 {
			text += "...–∏ –µ—â–µ –ø–ª–∞—Ç–µ–∂–∏\n"
			break
		}
	}

	msgConfig := tgbotapi.NewMessage(msg.Chat.ID, text)
	if len(keyboard) > 0 {
		msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	}
	s.bot.Send(msgConfig)
}

func (s *Service) handleInfo(msg *tgbotapi.Message) {
	if !s.isAdmin(msg.From.ID) {
		s.reply(msg.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}

	args := strings.Fields(msg.CommandArguments())
	if len(args) == 0 {
		s.reply(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /info <username>\n–ü—Ä–∏–º–µ—Ä: /info john_doe")
		return
	}

	username := args[0]

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (fuzzy –ø–æ–∏—Å–∫)
	var users []db.User
	result := s.repo.DB().Where("username LIKE ?", "%"+username+"%").Limit(5).Find(&users)
	if result.Error != nil {
		s.reply(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		return
	}

	if len(users) == 0 {
		s.reply(msg.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	if len(users) > 1 {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		text := "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
		var keyboard [][]tgbotapi.InlineKeyboardButton

		for _, user := range users {
			text += fmt.Sprintf("üë§ @%s (ID: %d)\n", user.Username, user.TgID)
			btn := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("‚ÑπÔ∏è @%s", user.Username),
				fmt.Sprintf("info_user_%d", user.TgID),
			)
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{btn})
		}

		msgConfig := tgbotapi.NewMessage(msg.Chat.ID, text)
		msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
		s.bot.Send(msgConfig)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	s.sendUserInfo(msg.Chat.ID, users[0].TgID)
}

func (s *Service) sendUserInfo(chatID int64, userID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	var user db.User
	result := s.repo.DB().First(&user, "tg_id = ?", userID)
	if result.Error != nil {
		s.reply(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
	var subscriptions []db.Subscription
	s.repo.DB().Where("user_id = ?", userID).
		Preload("Plan").
		Order("end_date DESC").
		Find(&subscriptions)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
	var payments []db.Payment
	s.repo.DB().Where("user_id = ?", userID).
		Preload("Plan").
		Preload("Method").
		Order("created_at DESC").
		Limit(5).
		Find(&payments)

	text := fmt.Sprintf(`üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

üÜî ID: %d
üë§ Username: @%s
üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
üîó –†–µ—Ñ. –∫–æ–¥: %s
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %s

üîë –ü–æ–¥–ø–∏—Å–∫–∏ (%d):`,
		user.TgID,
		user.Username,
		user.Phone,
		user.RefCode,
		user.CreatedAt.Format("02.01.2006"),
		len(subscriptions),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
	for _, sub := range subscriptions {
		status := "üü¢"
		if !sub.Active {
			status = "üî¥"
		}
		if time.Now().After(sub.EndDate) {
			status = "‚è∞"
		}

		text += fmt.Sprintf("\n%s %s (%s) –¥–æ %s",
			status, sub.Plan.Name, sub.Platform, sub.EndDate.Format("02.01.2006"))
	}

	text += fmt.Sprintf("\n\nüí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ (%d):", len(payments))

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
	for _, payment := range payments {
		statusEmoji := "‚è≥"
		switch payment.Status {
		case "approved":
			statusEmoji = "‚úÖ"
		case "rejected":
			statusEmoji = "‚ùå"
		}

		text += fmt.Sprintf("\n%s %d —Ä—É–±. (%s) - %s",
			statusEmoji, payment.Amount, payment.Plan.Name, payment.CreatedAt.Format("02.01"))
	}

	s.reply(chatID, text)
}

func (s *Service) handleAdminCallback(callback *tgbotapi.CallbackQuery) {
	data := callback.Data

	if strings.HasPrefix(data, "admin_") {
		s.handleAdminManagementCallback(callback)
		return
	}

	if strings.HasPrefix(data, "payment_") {
		s.handlePaymentCallback(callback)
		return
	}

	if strings.HasPrefix(data, "info_user_") {
		userIDStr := strings.TrimPrefix(data, "info_user_")
		userID, err := strconv.ParseInt(userIDStr, 10, 64)
		if err != nil {
			s.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		s.sendUserInfo(callback.Message.Chat.ID, userID)
		s.answerCallback(callback.ID, "")
		return
	}
}

func (s *Service) handleAdminManagementCallback(callback *tgbotapi.CallbackQuery) {
	data := callback.Data

	switch data {
	case "admin_list":
		s.showAdminList(callback)
	case "admin_add":
		// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		s.answerCallback(callback.ID, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	case "admin_disable":
		// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
		s.answerCallback(callback.ID, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	case "admin_cashier":
		// TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Å–∏—Ä–∞
		s.answerCallback(callback.ID, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	}
}

func (s *Service) showAdminList(callback *tgbotapi.CallbackQuery) {
	var admins []db.Admin
	result := s.repo.DB().Where("disabled = false").Find(&admins)
	if result.Error != nil {
		s.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")
		return
	}

	text := "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
	for _, admin := range admins {
		var user db.User
		s.repo.DB().First(&user, "tg_id = ?", admin.TgID)

		roleEmoji := "üë§"
		switch admin.Role {
		case "super":
			roleEmoji = "üëë"
		case "cashier":
			roleEmoji = "üí∞"
		case "support":
			roleEmoji = "üéß"
		}

		text += fmt.Sprintf("%s @%s (%s)\n", roleEmoji, user.Username, admin.Role)
	}

	editMsg := tgbotapi.NewEditMessageText(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		text,
	)
	s.bot.Send(editMsg)
	s.answerCallback(callback.ID, "")
}

func (s *Service) handlePaymentCallback(callback *tgbotapi.CallbackQuery) {
	data := callback.Data

	if strings.HasPrefix(data, "payment_approve_") {
		paymentIDStr := strings.TrimPrefix(data, "payment_approve_")
		paymentID, err := strconv.ParseUint(paymentIDStr, 10, 32)
		if err != nil {
			s.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞")
			return
		}

		err = s.approvePayment(uint(paymentID), callback.From.ID)
		if err != nil {
			s.answerCallback(callback.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
			return
		}

		s.answerCallback(callback.ID, "‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω")

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		editMsg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–¥–æ–±—Ä–µ–Ω",
		)
		s.bot.Send(editMsg)
		return
	}

	if strings.HasPrefix(data, "payment_reject_") {
		paymentIDStr := strings.TrimPrefix(data, "payment_reject_")
		paymentID, err := strconv.ParseUint(paymentIDStr, 10, 32)
		if err != nil {
			s.answerCallback(callback.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞")
			return
		}

		err = s.rejectPayment(uint(paymentID), callback.From.ID)
		if err != nil {
			s.answerCallback(callback.ID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
			return
		}

		s.answerCallback(callback.ID, "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		editMsg := tgbotapi.NewEditMessageText(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
		)
		s.bot.Send(editMsg)
		return
	}
}

func (s *Service) approvePayment(paymentID uint, adminID int64) error {
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx := s.repo.DB().Begin()
	if tx.Error != nil {
		return tx.Error
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	result := tx.Model(&db.Payment{}).
		Where("id = ? AND status = 'pending'", paymentID).
		Updates(map[string]interface{}{
			"status":      "approved",
			"approved_by": adminID,
		})

	if result.Error != nil {
		tx.Rollback()
		return result.Error
	}

	if result.RowsAffected == 0 {
		tx.Rollback()
		return fmt.Errorf("–ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	// –ü–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ, –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Ö
	// (–≤ –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–Ω–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã)

	return tx.Commit().Error
}

func (s *Service) rejectPayment(paymentID uint, adminID int64) error {
	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx := s.repo.DB().Begin()
	if tx.Error != nil {
		return tx.Error
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂
	var payment db.Payment
	if err := tx.First(&payment, paymentID).Error; err != nil {
		tx.Rollback()
		return err
	}

	if payment.Status != "pending" {
		tx.Rollback()
		return fmt.Errorf("–ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	payment.Status = "rejected"
	payment.ApprovedBy = &adminID

	if err := tx.Save(&payment).Error; err != nil {
		tx.Rollback()
		return err
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	var subscriptions []db.Subscription
	tx.Where("payment_id = ?", paymentID).Find(&subscriptions)

	for _, sub := range subscriptions {
		// –û—Ç–∫–ª—é—á–∞–µ–º –≤ wg-agent
		s.disablePeer(sub.Interface, sub.PublicKey)

		// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î
		tx.Model(&sub).Update("active", false)
	}

	return tx.Commit().Error
}
