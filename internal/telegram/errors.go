package telegram

import (
	"fmt"
	"log/slog"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Error –∫–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
const (
	ErrInvalidInput      = "INVALID_INPUT"
	ErrDatabaseError     = "DATABASE_ERROR"
	ErrWGAgentError      = "WGAGENT_ERROR"
	ErrPermissionDenied  = "PERMISSION_DENIED"
	ErrUserNotFound      = "USER_NOT_FOUND"
	ErrPlanNotFound      = "PLAN_NOT_FOUND"
	ErrPaymentError      = "PAYMENT_ERROR"
	ErrSubscriptionError = "SUBSCRIPTION_ERROR"
)

// BotError –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –±–æ—Ç–∞ —Å –∫–æ–¥–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type BotError struct {
	Code        string
	Message     string
	UserMessage string
	Details     string
}

func (e *BotError) Error() string {
	return fmt.Sprintf("[%s] %s: %s", e.Code, e.Message, e.Details)
}

// NewBotError —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –æ—à–∏–±–∫—É –±–æ—Ç–∞
func NewBotError(code, message, userMessage, details string) *BotError {
	return &BotError{
		Code:        code,
		Message:     message,
		UserMessage: userMessage,
		Details:     details,
	}
}

// handleError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (s *Service) handleError(chatID int64, err error) {
	slog.Error("Bot error occurred", "error", err)

	var userMessage string

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞—à–µ–π BotError
	if botErr, ok := err.(*BotError); ok {
		userMessage = botErr.UserMessage

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
		s.sendErrorReport(botErr)
	} else {
		// –û–±—â–∞—è –æ—à–∏–±–∫–∞
		userMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
		s.sendErrorReport(&BotError{
			Code:        "UNKNOWN_ERROR",
			Message:     "Unknown error occurred",
			UserMessage: userMessage,
			Details:     err.Error(),
		})
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	s.reply(chatID, "‚ùå "+userMessage)
}

// sendErrorReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
func (s *Service) sendErrorReport(botErr *BotError) {
	if s.cfg.SuperAdminID == "" {
		return
	}

	adminID, err := strconv.ParseInt(s.cfg.SuperAdminID, 10, 64)
	if err != nil {
		return
	}

	report := fmt.Sprintf(`üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:

–ö–æ–¥: %s
–°–æ–æ–±—â–µ–Ω–∏–µ: %s
–î–µ—Ç–∞–ª–∏: %s

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω–æ: %s`,
		botErr.Code,
		botErr.Message,
		botErr.Details,
		botErr.UserMessage,
	)

	msg := tgbotapi.NewMessage(adminID, report)
	s.bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫

func ErrInvalidInputf(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrInvalidInput,
		"Invalid input provided",
		"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
		fmt.Sprintf(details, args...),
	)
}

func ErrDatabasef(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrDatabaseError,
		"Database operation failed",
		"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		fmt.Sprintf(details, args...),
	)
}

func ErrWGAgentf(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrWGAgentError,
		"WG-Agent operation failed",
		"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
		fmt.Sprintf(details, args...),
	)
}

func ErrPermission(details string) *BotError {
	return NewBotError(
		ErrPermissionDenied,
		"Permission denied",
		"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
		details,
	)
}

func ErrUserNotFoundf(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrUserNotFound,
		"User not found",
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
		fmt.Sprintf(details, args...),
	)
}

func ErrPlanNotFoundf(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrPlanNotFound,
		"Plan not found",
		"–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
		fmt.Sprintf(details, args...),
	)
}

func ErrPaymentf(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrPaymentError,
		"Payment processing failed",
		"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
		fmt.Sprintf(details, args...),
	)
}

func ErrSubscriptionf(details string, args ...interface{}) *BotError {
	return NewBotError(
		ErrSubscriptionError,
		"Subscription operation failed",
		"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
		fmt.Sprintf(details, args...),
	)
}
