package wgtest

import (
	"context"
	"fmt"
	"log/slog"
	"time"

	"lime-bot/internal/gates/wgagent"
)

// IntegrationTest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WG Agent
type IntegrationTest struct {
	config   wgagent.Config
	notifyFn func(message string)
}

// NewIntegrationTest —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
func NewIntegrationTest(config wgagent.Config, notifyFn func(string)) *IntegrationTest {
	return &IntegrationTest{
		config:   config,
		notifyFn: notifyFn,
	}
}

// RunStartupTest –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (it *IntegrationTest) RunStartupTest(ctx context.Context) error {
	slog.Info("Starting WG Agent integration test", "wg_addr", it.config.Addr)

	// –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := it.testConnection(ctx); err != nil {
		errorMsg := fmt.Sprintf("üö® WG Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ!\n\n‚ùå –û—à–∏–±–∫–∞: %v\nüåê –ê–¥—Ä–µ—Å: %s\n\n‚ö†Ô∏è VPN –∫–ª—é—á–∏ –Ω–µ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è!", err, it.config.Addr)
		it.notifyFn(errorMsg)
		return err
	}

	// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π API
	if err := it.testAPIFunctions(ctx); err != nil {
		errorMsg := fmt.Sprintf("‚ö†Ô∏è WG Agent –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n‚ùå –û—à–∏–±–∫–∞: %v\nüåê –ê–¥—Ä–µ—Å: %s", err, it.config.Addr)
		it.notifyFn(errorMsg)
		return err
	}

	slog.Info("WG Agent integration test passed successfully")
	successMsg := fmt.Sprintf("‚úÖ WG Agent –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\nüåê –ê–¥—Ä–µ—Å: %s\nüîß –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", it.config.Addr)
	it.notifyFn(successMsg)
	return nil
}

// testConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (it *IntegrationTest) testConnection(ctx context.Context) error {
	slog.Info("Testing WG Agent connection")

	client, err := wgagent.NewClient(it.config)
	if err != nil {
		slog.Error("Failed to create WG Agent client", "error", err)
		return fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}
	defer client.Close()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
	testCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
	defer cancel()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
	req := &wgagent.GeneratePeerConfigRequest{
		Interface:      "wg0",
		ServerEndpoint: "test.example.com:51820",
		DNSServers:     "1.1.1.1",
		AllowedIPs:     "0.0.0.0/0",
	}

	_, err = client.GeneratePeerConfig(testCtx, req)
	if err != nil {
		slog.Error("WG Agent connection test failed", "error", err)
		return fmt.Errorf("—Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %w", err)
	}

	slog.Info("WG Agent connection test passed")
	return nil
}

// testAPIFunctions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API
func (it *IntegrationTest) testAPIFunctions(ctx context.Context) error {
	slog.Info("Testing WG Agent API functions")

	client, err := wgagent.NewClient(it.config)
	if err != nil {
		return fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}
	defer client.Close()

	testCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	// –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ peer
	slog.Info("Testing peer config generation")
	peerReq := &wgagent.GeneratePeerConfigRequest{
		Interface:      "wg0",
		ServerEndpoint: "test.example.com:51820",
		DNSServers:     "1.1.1.1, 1.0.0.1",
		AllowedIPs:     "0.0.0.0/0",
	}

	peerResp, err := client.GeneratePeerConfig(testCtx, peerReq)
	if err != nil {
		slog.Error("Peer config generation test failed", "error", err)
		return fmt.Errorf("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ peer: %w", err)
	}

	if peerResp.PrivateKey == "" || peerResp.PublicKey == "" {
		return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∫–ª—é—á–∏ –æ—Ç WG Agent")
	}

	// –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ peer
	slog.Info("Testing peer addition")
	testPeerID := fmt.Sprintf("test_peer_%d", time.Now().Unix())
	addReq := &wgagent.AddPeerRequest{
		Interface:  "wg0",
		PublicKey:  peerResp.PublicKey,
		AllowedIP:  peerResp.AllowedIP,
		KeepaliveS: 25,
		PeerID:     testPeerID,
	}

	_, err = client.AddPeer(testCtx, addReq)
	if err != nil {
		slog.Error("Peer addition test failed", "error", err)
		return fmt.Errorf("–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ peer: %w", err)
	}

	// –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ peer (–æ—á–∏—Å—Ç–∫–∞)
	slog.Info("Cleaning up test peer")
	removeReq := &wgagent.RemovePeerRequest{
		Interface: "wg0",
		PublicKey: peerResp.PublicKey,
	}

	err = client.RemovePeer(testCtx, removeReq)
	if err != nil {
		slog.Warn("Failed to cleanup test peer", "error", err, "peer_id", testPeerID)
		// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
	}

	slog.Info("WG Agent API functions test passed")
	return nil
}

// RunPeriodicHealthCheck –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è WG Agent
func (it *IntegrationTest) RunPeriodicHealthCheck(ctx context.Context, interval time.Duration) {
	slog.Info("Starting periodic WG Agent health check", "interval", interval)

	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	consecutiveFailures := 0
	const maxFailures = 3

	for {
		select {
		case <-ctx.Done():
			slog.Info("Stopping WG Agent health check")
			return
		case <-ticker.C:
			if err := it.testConnection(ctx); err != nil {
				consecutiveFailures++
				slog.Error("WG Agent health check failed", "error", err, "consecutive_failures", consecutiveFailures)

				if consecutiveFailures >= maxFailures {
					criticalMsg := fmt.Sprintf("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: WG Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —É–∂–µ %d —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!\n\n‚ùå –û—à–∏–±–∫–∞: %v\nüåê –ê–¥—Ä–µ—Å: %s\n\n‚ö†Ô∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–∏—Å!", consecutiveFailures, err, it.config.Addr)
					it.notifyFn(criticalMsg)
					consecutiveFailures = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
				}
			} else {
				if consecutiveFailures > 0 {
					slog.Info("WG Agent health check recovered", "after_failures", consecutiveFailures)
					recoveryMsg := fmt.Sprintf("‚úÖ WG Agent –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ %d –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫\n\nüåê –ê–¥—Ä–µ—Å: %s\nüîß –°–µ—Ä–≤–∏—Å —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", consecutiveFailures, it.config.Addr)
					it.notifyFn(recoveryMsg)
				}
				consecutiveFailures = 0
			}
		}
	}
}
