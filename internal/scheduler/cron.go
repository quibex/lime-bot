package scheduler

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"time"

	"lime-bot/internal/config"
	"lime-bot/internal/db"
	"lime-bot/internal/gates/wgagent"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/robfig/cron/v3"
)

type Scheduler struct {
	cron     *cron.Cron
	repo     *db.Repository
	bot      *tgbotapi.BotAPI
	cfg      *config.Config
	wgClient *wgagent.Client
}

func NewScheduler(repo *db.Repository, bot *tgbotapi.BotAPI, cfg *config.Config) (*Scheduler, error) {
	// –°–æ–∑–¥–∞–µ–º wg-agent –∫–ª–∏–µ–Ω—Ç
	wgConfig := wgagent.Config{
		Addr: cfg.WGAgentAddr,
	}
	wgClient, err := wgagent.NewClient(wgConfig)
	if err != nil {
		return nil, err
	}

	return &Scheduler{
		cron:     cron.New(),
		repo:     repo,
		bot:      bot,
		cfg:      cfg,
		wgClient: wgClient,
	}, nil
}

func (s *Scheduler) Start() error {
	// Cron-–∑–∞–¥–∞—á–∞: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:10)
	_, err := s.cron.AddFunc("10 0 * * *", s.disableExpiredSubscriptions)
	if err != nil {
		return fmt.Errorf("failed to add expired subscriptions job: %w", err)
	}

	// Cron-–∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
	_, err = s.cron.AddFunc("*/30 * * * *", s.sendExpirationReminders)
	if err != nil {
		return fmt.Errorf("failed to add expiration reminders job: %w", err)
	}

	// Cron-–∑–∞–¥–∞—á–∞: health-check wg-agent (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
	_, err = s.cron.AddFunc("*/5 * * * *", s.healthCheckWGAgent)
	if err != nil {
		return fmt.Errorf("failed to add health check job: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
	s.cron.Start()
	slog.Info("Cron scheduler started")

	return nil
}

func (s *Scheduler) Stop() {
	s.cron.Stop()
	s.wgClient.Close()
	slog.Info("Cron scheduler stopped")
}

// disableExpiredSubscriptions –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
func (s *Scheduler) disableExpiredSubscriptions() {
	slog.Info("Running expired subscriptions cleanup...")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
	var expiredSubs []db.Subscription
	today := time.Now().Format("2006-01-02")

	result := s.repo.DB().Where("active = true AND end_date < ?", today).Find(&expiredSubs)
	if result.Error != nil {
		slog.Error("Error fetching expired subscriptions", "error", result.Error)
		return
	}

	if len(expiredSubs) == 0 {
		slog.Info("No expired subscriptions found")
		return
	}

	disabled := 0
	removed := 0
	ctx := context.Background()

	for _, sub := range expiredSubs {
		// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º peer
		disableReq := &wgagent.DisablePeerRequest{
			Interface: sub.Interface,
			PublicKey: sub.PublicKey,
		}

		err := s.wgClient.DisablePeer(ctx, disableReq)
		if err != nil {
			slog.Error("Failed to disable peer", "peer_id", sub.PeerID, "error", err)
			continue
		}

		// –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º peer (–¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
		removeReq := &wgagent.RemovePeerRequest{
			Interface: sub.Interface,
			PublicKey: sub.PublicKey,
		}

		err = s.wgClient.RemovePeer(ctx, removeReq)
		if err != nil {
			slog.Error("Failed to remove peer", "peer_id", sub.PeerID, "error", err)
			disabled++
		} else {
			removed++
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
		s.repo.DB().Model(&sub).Update("active", false)
	}

	slog.Info("Expired subscriptions cleanup completed", "disabled", disabled, "removed", removed)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
	s.sendAdminReport(fmt.Sprintf("üïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞:\n‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ: %d\nüóë –£–¥–∞–ª–µ–Ω–æ: %d", disabled, removed))
}

// sendExpirationReminders –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
func (s *Scheduler) sendExpirationReminders() {
	slog.Info("Checking for expiration reminders...")

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
	threeDaysLater := time.Now().AddDate(0, 0, 3).Format("2006-01-02")

	var soonExpiringSubs []db.Subscription
	result := s.repo.DB().Where("active = true AND end_date = ?", threeDaysLater).
		Preload("User").
		Preload("Plan").
		Find(&soonExpiringSubs)

	if result.Error != nil {
		slog.Error("Error fetching soon expiring subscriptions", "error", result.Error)
		return
	}

	if len(soonExpiringSubs) == 0 {
		return // –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç
	}

	slog.Info("Found subscriptions expiring in 3 days", "count", len(soonExpiringSubs))

	for _, sub := range soonExpiringSubs {
		text := fmt.Sprintf(`‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "%s" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è (%s).

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN!

–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy`,
			sub.Plan.Name,
			sub.EndDate.Format("02.01.2006"),
		)

		msg := tgbotapi.NewMessage(sub.User.TgID, text)
		_, err := s.bot.Send(msg)
		if err != nil {
			slog.Error("Failed to send expiration reminder", "user_id", sub.User.TgID, "error", err)
		}
	}
}

// healthCheckWGAgent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ wg-agent
func (s *Scheduler) healthCheckWGAgent() {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ wg-agent

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
	wgConfig := wgagent.Config{
		Addr: s.cfg.WGAgentAddr,
	}

	testClient, err := wgagent.NewClient(wgConfig)
	if err != nil {
		s.sendHealthAlert(fmt.Sprintf("‚ùå WG-Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v", err))
		return
	}
	defer testClient.Close()

	slog.Info("WG-Agent health check passed")
}

// sendAdminReport –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
func (s *Scheduler) sendAdminReport(message string) {
	if s.cfg.SuperAdminID == "" {
		return
	}

	adminID, err := strconv.ParseInt(s.cfg.SuperAdminID, 10, 64)
	if err != nil {
		return
	}

	msg := tgbotapi.NewMessage(adminID, message)
	s.bot.Send(msg)
}

// sendHealthAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–∏—Å—Ç–µ–º—ã
func (s *Scheduler) sendHealthAlert(message string) {
	slog.Warn("Health alert", "message", message)
	s.sendAdminReport("üö® " + message)
}
